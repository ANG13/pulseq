/**
  \mainpage Introduction

This project is an open source framework for the development and execution of 
magnetic resonance (MR) sequences for imaging and spectroscopy. 
A central contribution of this project is an **open file format** to compactly 
describe MR sequences suitable for execution on an MR scanner. The detailed file specification 
can be obtained here: <a href="specification.pdf">`specification.pdf`</a>

The source code provides example implementations of this format. Code documentation is 
divided into <a href="matlab.html">MATLAB</a> and <a href="annotated.html">C++</a> sections. 

## Examples

Some example uses of the source code are

-  <a href="matlabWrite.html">MATLAB write sequence</a>
-  <a href="matlabRead.html">MATLAB read sequence</a>
-  <a href="examples.html">C++ console parser</a>


## Download source code

Both MATLAB and C++ source code is available here: https://github.com/pulseq/pulseq.
Alternatively, cloning the git repository directly:

    git clone git@github.com:pulseq/pulseq.git

Run configure to prepare for building.

    cd pulseq
    ./configure
    
Now run `make` to build the executables and/or documentation.

    make

## Sneak peak

The C++ class `ExternalSequence` provides functionality to read a sequence file and decompress 
the sequence blocks. This implementation is ideal for running MR sequences on different hardware
platforms.
~~~~~~~~~~~~~{.cpp}
// Create sequence object and load file
ExternalSequence seq;
seq.load(path);

SeqBlock* block = seq.GetBlock(1);
bool isRF = block->isRF();
~~~~~~~~~~~~~

The MATLAB package `mr` provides extended functionality to create and visualize sequences as well as
reading and writing sequence files.
~~~~~~~~~~~~~{.matlab}
% Load a sequence and add a new GX gradient to the end before visualizing.
seq = mr.Sequence();
seq.load('gre.seq');
gx = mr.makeTrapezoid('x','FlatArea',kWidth,'FlatTime',readoutTime);
seq.addBlock(gx);
seq.plot();
~~~~~~~~~~~~~

\image html demoRead_03.png "Example design and visualization of an MRI sequence in MATLAB"



*/
  
  /**
  \page matlab MATLAB source code
  
  A MATLAB interface is provided through the `mr` package. The package 
  contains stand-alone functions for generating common sequence blocks suitable 
  for MRI or spectroscopy such as selective RF pulses, trapezoid gradients 
  and ADC readout events.  
  The `Sequence` class maintains all sequence data in a compressed form and provides methods 
  to read/write sequence files or modify blocks directly. 


Examples

\htmlonly
<div class="directory">
<table class="directory">
<tr class="even"><td class="entry"><span style="width:16px;display:inline-block;"></span>
<span class="icona"><span class="icon">M</span></span><a class="el" href="matlabWrite.html">Write sequence</a></td><td class="desc">Generate sequence blocks and write to file.</td></tr>

<tr><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span>
<span class="icona"><span class="icon">M</span></span><a class="el" href="matlabRead.html">Read sequence</a></td><td class="desc">Read file and visualise the MR sequence.</td></tr>

</table>
</div><!-- directory -->
\endhtmlonly
   
  Classes

\htmlonly
<div class="directory">
<table class="directory">
<tr class="even"><td class="entry"><span style="width:16px;display:inline-block;"></span>
<span class="icona"><span class="icon">M</span></span><a class="el" href="SequenceCode.html">Sequence</a></td><td class="desc">MATLAB class for generating, reading and writing MR sequences.</td></tr>
</table>
</div><!-- directory -->
\endhtmlonly

  Functions
  
\htmlonly
<div class="directory">
<table class="directory">
<tr class="even"><td class="entry"><span style="width:16px;display:inline-block;"></span>
<span class="icona"><span class="icon">M</span></span>calcDuration
</td><td class="desc">Calculate the duration of a block.</td></tr>

<tr class=""><td class="entry"><span style="width:16px;display:inline-block;"></span>
<span class="icona"><span class="icon">M</span></span>compressShape
</td><td class="desc">Compress a waveform using a run-length compression scheme.</td></tr>

<tr class=""><td class="entry"><span style="width:16px;display:inline-block;"></span>
<span class="icona"><span class="icon">M</span></span>decompressShape
</td><td class="desc">Decompress a shape to the original waveform.</td></tr>

<tr class=""><td class="entry"><span style="width:16px;display:inline-block;"></span>
<span class="icona"><span class="icon">M</span></span>makeAdc
</td><td class="desc">Create an ADC readout event.</td></tr>

<tr class="even"><td class="entry"><span style="width:16px;display:inline-block;"></span>
<span class="icona"><span class="icon">M</span></span>makeDelay
</td><td class="desc">Create a delay event.</td></tr>

<tr class=""><td class="entry"><span style="width:16px;display:inline-block;"></span>
<span class="icona"><span class="icon">M</span></span>makeSincPulse
</td><td class="desc">Create a sinc RF pulse and optionally the slice-select gradient.</td></tr>

<tr class="even"><td class="entry"><span style="width:16px;display:inline-block;"></span>
<span class="icona"><span class="icon">M</span></span>makeTrapezoid
</td><td class="desc">Create a trapezoid gradient event.</td></tr>

</table>
</div>
\endhtmlonly
  



  */

// *************************** READ EXAMPLE *******************
/**
\page matlabRead MATLAB read example

\htmlinclude demoRead.html 
  \n
*/

// *************************** WRITE EXAMPLE *******************
/**
\page matlabWrite MATLAB write example

\htmlinclude demoWrite.html 
  \n
*/

// *************************** CLASS *******************
/**
  \page SequenceCode MATLAB class
  \htmlinclude Sequence.html 
  */ 
